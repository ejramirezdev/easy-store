// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Roles muy simples para empezar
enum Role {
  CUSTOMER
  ADMIN
}

/// Estado de una orden
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

/// Usuario (cliente)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders      Order[]
  carts       Cart[]
  accounts    Account[]
  sessions    Session[]
  redemptions CouponRedemption[]

  emailVerified DateTime?
  image         String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Categorías
model Category {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
  services Service[]
}

/// Productos físicos
model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
  images     ProductImage[]
  cartItems  CartItem[]

  @@index([createdAt])
  @@index([name])
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  url       String
  alt       String?
  sortOrder Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, sortOrder])
}

/// Servicios (software/hardware)
model Service {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  durationMin Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
}

/// Orden (puede mezclar productos y servicios)
model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // NUEVO: direcciones
  shippingAddressId String
  shippingAddress   Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress    Address @relation("BillingAddress", fields: [billingAddressId], references: [id])

  // NUEVO: snapshot de totales (opcional, muy útil)
  subtotal      Decimal? @db.Decimal(10, 2)
  discountTotal Decimal? @db.Decimal(10, 2)
  shippingTotal Decimal? @db.Decimal(10, 2)
  taxTotal      Decimal? @db.Decimal(10, 2)
  couponCode    String?
  couponAmount  Decimal? @db.Decimal(10, 2)

  items OrderItem[]
}

/// Ítems de la orden
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
  quantity  Int      @default(1)
  unitPrice Decimal  @db.Decimal(10, 2)
}

/// Carrito
model Cart {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items       CartItem[]
  redemptions CouponRedemption[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

/// Cupones
enum CouponType {
  PERCENT
  FIXED
  FREESHIP
}

model Coupon {
  id           String     @id @default(uuid())
  code         String     @unique
  type         CouponType
  value        Decimal    @db.Decimal(10, 2)
  minSubtotal  Decimal?   @db.Decimal(10, 2)
  startsAt     DateTime?
  endsAt       DateTime?
  maxUses      Int?
  perUserLimit Int?
  usedCount    Int        @default(0)
  isActive     Boolean    @default(true)

  // Relación con redenciones
  redemptions CouponRedemption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CouponRedemption {
  id       String  @id @default(uuid())
  couponId String
  userId   String?
  cartId   String?

  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  cart   Cart?  @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([couponId])
  @@index([userId])
  @@index([cartId])
}

model Address {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  email      String
  phone      String?
  documentId String?
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String?
  country    String // "EC"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}
